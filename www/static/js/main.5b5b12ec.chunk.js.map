{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","StrictMode","document","getElementById","window","cordova","addEventListener"],"mappings":"2QAiBeA,EAfA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACnC,OACI,sBAAKC,UAAU,SAAf,UACI,6BAAKJ,IACL,6BACKG,EAAYE,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,4BAAIN,IACJ,qBAAKG,UAAU,QAAQI,IAAKN,EAAOO,IAAI,SCwCpCC,G,MAhDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,UAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUhBC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,sBAAKrB,UAAU,MAAf,UACE,uBAAMwB,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBX,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa2B,KAAK,OAAOC,MAAOlB,EAAQmB,SAb1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAaf,wBAAQ5B,UAAU,gBAAgB2B,KAAK,SAAvC,wBAEF,qBAAK3B,UAAU,UAAf,SACGQ,EAAQP,KAAI,SAAA8B,GAAM,OACnB,cAAC,EAAD,CAAkCnC,MAAOmC,EAAOA,OAAOC,MAAOnC,SAAUkC,EAAOA,OAAOlC,SACtFC,MAAOiC,EAAOA,OAAOjC,MAAOC,YAAagC,EAAOA,OAAOhC,aAD1CgC,EAAOA,OAAOC,iBC/BpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDd,SAASQ,IACPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAIxBC,OAAOC,QACTH,SAASI,iBAAiB,eAAe,WACvCR,OACC,GAEHA,IAMFT,M","file":"static/js/main.5b5b12ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({title,calories,image, ingredients}) => {\r\n    return(\r\n        <div className='recipe'>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient =>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className=\"image\" src={image} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect, useState} from 'react';\nimport Recipe from \"./Recipe\";\nimport './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"2da4af9d\";\n  const APP_KEY = \"2e2b5a9c2a87fda6e39295bc68829280\"\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chickn');\n\n\n  useEffect( () =>{\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e =>{\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('')\n  };\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\"> Search</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n        <Recipe key={recipe.recipe.label} title={recipe.recipe.label} calories={recipe.recipe.calories}\n        image={recipe.recipe.image} ingredients={recipe.recipe.ingredients}\n        />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction renderReactDom(){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}